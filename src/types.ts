// Import the base database types
import type { Database } from "./db/database.types";

// Aliases for base database types
export type PublicDatabase = Database["public"];
export type PublicTables = PublicDatabase["Tables"];
export type FlashcardsRow = PublicTables["flashcards"]["Row"];
export type GenerationsRow = PublicTables["generations"]["Row"];
export type GenerationErrorLogsRow = PublicTables["generation_error_logs"]["Row"];

// Generic pagination interface for paginated responses
export interface PaginatedDto<T> {
  items: T[];
  total: number;
  page: number;
  limit: number;
}

// Command Model for creating a generation (POST /api/generations request payload)
export interface CreateGenerationCommand {
  // The source text for generation (must be between 1000 and 10000 characters)
  source_text: string;
}

// DTO for flashcard proposal used in a generation response
export type FlashcardProposalDto = Pick<
  FlashcardsRow,
  "id" | "front" | "back" | "source"
>;

// DTO for generation response (used in POST and GET /api/generations)
export type GenerationResponseDto = Pick<
  GenerationsRow,
  "id" | "generated_count" | "created_at"
> & {
  // List of flashcard proposals generated by the AI
  flashcards_proposals: FlashcardProposalDto[];
};

// Command Model for creating flashcards (POST /api/flashcards request payload)
export interface CreateFlashcardsCommand {
  flashcards: CreateFlashcardCommandDto[];
}

export type Source = "manual" | "ai-full" | "ai-edited";

// Command Model for creating a single flashcard
// Uses a discriminated union to ensure that when the flashcard is manually created,
// generation_id is null, and when it's AI-generated, generation_id is required.
export type CreateFlashcardCommandDto =
  | {
      front: string;
      back: string;
      source: "manual";
      generation_id: null;
    }
  | {
      front: string;
      back: string;
      source: "ai-full" | "ai-edited";
      generation_id: number;
    };

// Command Model for updating a flashcard (PUT /api/flashcards/{id} request payload)
export interface UpdateFlashcardCommand {
  front: string;
  back: string;
  source: "manual" | "ai-full" | "ai-edited";
}

// DTO for flashcard response (used in GET /api/flashcards and GET /api/flashcards/{id})
export type FlashcardResponseDto = Pick<
  FlashcardsRow,
  "id" | "front" | "back" | "generation_id" | "source" | "created_at" | "updated_at"
>;

// DTO for generation error log (used in GET /api/generation-error-logs)
export type GenerationErrorLogDto = GenerationErrorLogsRow; 